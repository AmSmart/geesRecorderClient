@page "/attendance/enrol/{ProjectId:int}"
@implements IAsyncDisposable
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.SignalR.Client
@using System.IO

<EditForm Model="EnrolPersonDTO" OnValidSubmit="BeginEnrolment">
    <DataAnnotationsValidator />
    <p>Enter the person's details</p>
    <MatTextField @bind-Value="EnrolPersonDTO.FirstName" Label="First Name" />
    <MatTextField @bind-Value="EnrolPersonDTO.LastName" Label="Last Name" />
    <MatTextField @bind-Value="EnrolPersonDTO.CustomId" Label="Custom ID" />
    <MatButton type="submit">Enrol</MatButton>
</EditForm>

<MatDialog CanBeClosed="false" @bind-IsOpen="@_dialogIsOpen">
    <MatDialogTitle>Scan your finger</MatDialogTitle>
    <MatDialogContent>

        <p>Fingerprint Scanner Status: @_statusMessage</p>
        <Loading />
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(async() => await AbortFingerprintOperations())">Abort</MatButton>
    </MatDialogActions>
</MatDialog>

@code{

    bool _dialogIsOpen;

    [Parameter]
    public int ProjectId { get; set; }

    [Inject]
    public ApiClient ApiClient { get; set; }

    [Inject]
    public IMatToaster Toaster { get; set; }

    public Enrol()
    {
        // TODO: _url = Path.Combine(NavigationManager.BaseUri, "fingerprinthub");//.Replace("\\", "/");
        _url = "https://localhost:5001/fingerprinthub";
    }

    public EnrolPersonDTO EnrolPersonDTO { get; set; } = new();

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    HubConnection _connection = null;
    string _url;

    string _statusMessage = "Initialising...";

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(_url)
            .Build();

        _connection.Closed += async (s) =>
        {
            await _connection.StartAsync();
        };

        _connection.On<int, string>("state", async (code, message) =>
        {
            _statusMessage = message;
            if(code == FingerprintConstants.Error)
            {
                Toaster.Add("Enrolment Failed!", MatToastType.Danger);
                await AbortFingerprintOperations();
            }
            StateHasChanged();
        });

        _connection.On<int, bool>("id", async (id, exists) =>
        {
            EnrolPersonDTO = EnrolPersonDTO with
            {
                FingerPrintId = id,
                ProjectId = ProjectId,
                PersonAlreadyExists = exists
            };
            _statusMessage = "Scan Successful, Saving your data";
            await CompleteEnrolment();
            StateHasChanged();
        });

        await _connection.StartAsync();
    }

    bool IsHubConnected() => _connection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        await ConnectToServer();
    }

    public async ValueTask DisposeAsync()
    {
        await _connection.DisposeAsync();
    }

    public async Task AbortFingerprintOperations()
    {
        await _connection.SendAsync("Abort");
        _dialogIsOpen = false;
    }

    public async Task BeginEnrolment()
    {
        await _connection.SendAsync("Enrol");
        _dialogIsOpen = true;
    }

    public async Task CompleteEnrolment()
    {
        Console.WriteLine(EnrolPersonDTO);
        var result = await ApiClient.EnrolPerson(EnrolPersonDTO);
        if (result.Succeeded)
        {
            Toaster.Add("Enrolment Successful!", MatToastType.Success);
        }
        else
        {
            Toaster.Add(result.Error, MatToastType.Danger);
        }
        await AbortFingerprintOperations();
    }
}