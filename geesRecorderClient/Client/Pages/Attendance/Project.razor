@page "/attendance/project/{Id:int}"
@using Models = geesRecorderClient.Shared.Models;

@if (ProjectData is null)
{
    <Loading />
}
else
{
    if (ProjectData.Type == ProjectType.Attendance)
    {
        <MatButton OnClick="Enrol">Enrol</MatButton>

        <MatButton>Add Extra Fingerprint</MatButton>
        

        <MatButton OnClick="MarkAttendance">Mark Attendance</MatButton>
        
        <MatButton OnClick="(e => _dialogIsOpen = true)">New Event</MatButton>


        <MatDialog @bind-IsOpen="_dialogIsOpen">
            <MatDialogTitle>Add New Event</MatDialogTitle>
            <MatDialogContent>
                <EditForm Model="AddNewEventDTO" OnValidSubmit="AddEvent">
                    <p>Enter the Event details</p>

                    <MatTextField @bind-Value="AddNewEventDTO.EventName" Label="Event Name" />
                    <p>
                        <MatDatePicker @bind-Value="AddNewEventDTO.Start" EnableTime="true" Label="Start Time"></MatDatePicker>
                    </p>
                    <p>
                        <MatDatePicker @bind-Value="AddNewEventDTO.End" EnableTime="true" Label="End Time"></MatDatePicker>
                    </p>
                    <MatButton type="submit">Add Event</MatButton>
                </EditForm>
            </MatDialogContent>
        </MatDialog>
    }
    else if (ProjectData.Type == ProjectType.DataCollection)
    {

    }
}

@code{

    bool _dialogIsOpen = false;

    [Parameter]
    public int Id { get; set; }

    public Models.Project ProjectData { get; set; } = null;

    public AddNewEventDTO AddNewEventDTO { get; set; }

    //public MarkAttendanceDTO MarkAttendanceDTO { get; set; } 

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ApiClient ApiClient { get; set; }

    [Inject]
    protected IMatToaster Toaster { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await ApiClient.GetProject(Id);
        if (result.Succeeded)
        {
            ProjectData = result.Data;
            AddNewEventDTO = new()
            {
                EventName = $"{ProjectData.Name} - {DateTime.Now:MM-dd-yyyy}",
                Start = DateTime.UtcNow,
                End = DateTime.Now
            };
        }
        else
        {
            throw new Exception();
        }
    }

    public void Enrol()
    {
        Console.WriteLine("Enrol");
        NavigationManager.NavigateTo($"/attendance/enrol/{Id}");
    }

    public void MarkAttendance()
    {
        Console.WriteLine("MarkAttendance");
        NavigationManager.NavigateTo($"/attendance/mark/{Id}");
    }



    public async Task AddEvent()
    {
        var result = await ApiClient.AddNewEvent(AddNewEventDTO);
        if (result.Succeeded)
        {
            Toaster.Add("Event Added Successfully", MatToastType.Success);
        }
        else
        {
            Toaster.Add("Failed to add event", MatToastType.Danger);
        }
    }
}