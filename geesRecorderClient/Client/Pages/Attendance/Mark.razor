@page "/attendance/mark/{ProjectId:int}"
@implements IAsyncDisposable
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.SignalR.Client
@using System.IO 

<div class="text-center">
    <span>
        <MatButton OnClick="@(async () => { _markIn = true; await BeginMarking(); })">Mark In</MatButton>
        <MatButton OnClick="@(async () => { _markIn = false; await BeginMarking(); })">Mark Out</MatButton>
    </span>
</div>

<MatDialog CanBeClosed="false" @bind-IsOpen="@_dialogIsOpen">
    <MatDialogTitle>Scan your finger</MatDialogTitle>
    <MatDialogContent>

        <p>Fingerprint Scanner Status: @_statusMessage</p>
        <Loading />
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(async() => await AbortFingerprintOperations())">Abort</MatButton>
    </MatDialogActions>
</MatDialog>

@code{

    bool _dialogIsOpen;
    bool _markIn;
    HubConnection _connection = null;
    string _url;
    string _statusMessage = "Initialising...";
    int _eventId;

    public Mark()
    {
        //_url = Path.Combine(NavigationManager.BaseUri, "fingerprinthub");//.Replace("\\", "/");
        _url = "https://localhost:5001/fingerprinthub";
    }

    [Parameter]
    public int ProjectId { get; set; }

    public MarkAttendanceDTO MarkAttendanceDTO { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IMatToaster Toaster { get; set; }

    [Inject]
    public ApiClient ApiClient { get; set; }

    public void MarkAttendance()
    {
        _dialogIsOpen = true;
    }

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(_url)
            .Build();

        _connection.Closed += async (s) =>
        {
            await _connection.StartAsync();
        };

        _connection.On<int, string>("state", async (code, message) =>
        {
            _statusMessage = message;
            if (code == FingerprintConstants.Error)
            {
                Toaster.Add("Fingerprint Scan Failed!", MatToastType.Danger);
                await AbortFingerprintOperations();
            }
            StateHasChanged();
        });

        _connection.On<int>("id", async (id) =>
        {
            MarkAttendanceDTO = new()
            {
                AttendanceTimeStamp = DateTime.UtcNow,
                EventId = _eventId,
                FingerprintId = id
            };
            _statusMessage = "Scan Successful, Marking your attendance";
            await CompleteMarking();
            StateHasChanged();
        });

        await _connection.StartAsync();
    }

    bool IsHubConnected() => _connection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _eventId = NavigationManager.ExtractQueryStringByKey<int>("eventId");
        await ConnectToServer();
    }

    public async ValueTask DisposeAsync()
    {
        await _connection.DisposeAsync();
    }

    public async Task AbortFingerprintOperations()
    {
        await _connection.SendAsync("Abort");
        _dialogIsOpen = false;
    }

    public async Task BeginMarking()
    {
        await _connection.SendAsync("Search");
        _dialogIsOpen = true;
    }

    public async Task CompleteMarking()
    {
        OperationResult result;

        if (_markIn)
        {
            result = await ApiClient.MarkAttendanceIn(MarkAttendanceDTO);
        }
        else
        {
            result = await ApiClient.MarkAttendanceOut(MarkAttendanceDTO);
        }

        if (result.Succeeded)
        {
            Toaster.Add("Attendance Marked Successfully!", MatToastType.Success);
        }
        else
        {
            Toaster.Add(result.Error, MatToastType.Danger);
        }
        await AbortFingerprintOperations();
    }
}