@page "/dashboard"

<div class="text-center">
    <h5>@($"{UserName}'s Projects")</h5>
    <MatFAB OnClick="@(_ => _createProjectDialogIsOpen = true)">
        <MatIcon Style="font-size: 3em;">@MatIconNames.Add_circle</MatIcon>
    </MatFAB>
</div>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        @foreach (var project in Projects)
        {
            string imagePath = project.Type switch
            {
                ProjectType.Attendance => "/img/attendance.jpg",
                ProjectType.DataCollection => "/img/survey.jpg",
                _ => ""
            };

            <div class="mat-layout-grid-cell">
                <MatCard class="demo-mat-card">
                    <MatCardContent>
                        <MatCardMedia Wide="true" ImageUrl="@imagePath"></MatCardMedia>
                        <div class="demo-mat-card-content">
                            <MatSubtitle2 class="demo-mat-card-clean-margin">
                                @project.Name
                            </MatSubtitle2>
                        </div>
                    </MatCardContent>
                    <MatCardActions>
                        <MatButton OnClick="() => Navigate(project.Id, project.Type)">Open</MatButton>
                        <MatButton OnClick="() => OpenDeleteModal(project.Id)" class="text-danger">Delete</MatButton>
                    </MatCardActions>
                </MatCard>
            </div>
        }
    </div>
</div>

<EditForm Model="CreateProjectDTO" OnValidSubmit="CreateProject">
    <DataAnnotationsValidator />
    <MatDialog @bind-IsOpen="@_createProjectDialogIsOpen">
        <MatDialogTitle>Create Project</MatDialogTitle>
        <MatDialogContent>
            <p>Enter the project details</p>
            <MatTextField @bind-Value="CreateProjectDTO.Name" Label="Project Name" />
            <MatSelect @bind-Value="@(CreateProjectDTO.Type)" Label="Project Type">
                <MatOption TValue="int" Value="(int)ProjectType.Attendance">Attendance</MatOption>
                <MatOption TValue="int" Value="(int)ProjectType.DataCollection">Data Collection/Survey</MatOption>
            </MatSelect>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(_ => { _createProjectDialogIsOpen = false; })">No Thanks</MatButton>
            <MatButton Type="submit">OK</MatButton>
        </MatDialogActions>
    </MatDialog>
</EditForm>

<MatDialog @bind-IsOpen="@_deleteProjectDialogIsOpen">
    <MatDialogTitle>Delete Project</MatDialogTitle>
    <MatDialogContent>
        <p>Are you sure you want to delete this project?</p>
        <blockquote class="text-danger">@_projectToDelete.Name</blockquote>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(_ => { _deleteProjectDialogIsOpen = false; })">No Thanks</MatButton>
        <MatButton Type="button" OnClick="@(() => DeleteProject(_projectToDelete.Id ?? throw new Exception("Invalid ID")))">Yes</MatButton>
    </MatDialogActions>
</MatDialog>


@code{

    bool _createProjectDialogIsOpen;
    bool _deleteProjectDialogIsOpen;
    (int? Id, string Name) _projectToDelete = (null, null);

    public CreateProjectDTO CreateProjectDTO { get; set; } = new();

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ApiClient ApiClient { get; set; }

    [Inject]
    protected IMatToaster Toaster { get; set; }

    public List<Project> Projects { get; set; } = new();

    public string UserName { get; set; } = "";

    public void Navigate(int id, ProjectType projectType)
    {
        switch (projectType)
        {
            case ProjectType.Attendance:
                NavigationManager.NavigateTo($"{ClientRoutes.AttendanceProject}/{id}");
                break;

            case ProjectType.DataCollection:
                NavigationManager.NavigateTo($"{ClientRoutes.DataCollectionProject}/{id}");
                break;
        }
    }

    void OpenDeleteModal(int id)
    {
        _deleteProjectDialogIsOpen = true;
        _projectToDelete = (id, Projects.First(x => x.Id == id).Name);
    }

    async Task DeleteProject(int id)
    {
        _deleteProjectDialogIsOpen = false;
        _projectToDelete = (null, null);

        var result = await ApiClient.DeleteProject(id);
        if (result.Succeeded)
        {
            Toaster.Add("Project Deleted Successfully", MatToastType.Success);
            await InitialiseDashboard();
        }
        else
        {
            Toaster.Add(result.Error, MatToastType.Danger);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await InitialiseDashboard();
    }

    async Task InitialiseDashboard()
    {
        var result = await ApiClient.GetDashboard();
        if (result.Succeeded)
        {
            Projects = result.Data.Projects;
            UserName = result.Data.UserName;
        }
        else
        {
            throw new Exception();
        }
    }

    async Task CreateProject()
    {
        if ((ProjectType)CreateProjectDTO.Type == ProjectType.None)
        {
            Toaster.Add("Choose a valid project type", MatToastType.Danger);
            return;
        }
        _createProjectDialogIsOpen = false;

        var result = await ApiClient.CreateProject(CreateProjectDTO.Name, (ProjectType)CreateProjectDTO.Type);
        if (result.Succeeded)
        {
            Toaster.Add("Project Cration Successful", MatToastType.Success);
            await OnInitializedAsync();
        }
    }
}